[2024-04-16 15:16:55.518112] DEBUG: runserver: Hello From Below: GridLoadMan-1-0-0
[2024-04-16 15:16:55.959188] DEBUG: runserver: Connected with result code 0
[2024-04-16 15:16:55.959188] DEBUG: openailib: Initializing OpenAILib...
[2024-04-16 15:16:56.251493] DEBUG: openailib: Agent found!GridLoadMan-1-0-0
[2024-04-16 15:16:56.363658] DEBUG: openailib: Thread Object: Thread(id='thread_xITVemmzqDRD5JlJS1CNE5fY', created_at=1713295020, metadata={}, object='thread')

[2024-04-16 15:16:56.364698] DEBUG: openailib: Hello. My name is Dave. What is your name?
[2024-04-16 15:16:56.557264] DEBUG: openailib: Message Object: ThreadMessage(id='msg_ke8hBaKVGu72dVabtVc2kUx2', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='Hello. My name is Dave. What is your name?'), type='text')], created_at=1713295020, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_xITVemmzqDRD5JlJS1CNE5fY') 

[2024-04-16 15:16:56.966722] DEBUG: openailib: Run Object: Run(id='run_9Hz1sO9Ncz1z5U2hBss3XgbS', assistant_id='asst_3VeyTc4thRQVyP4LVpEtsova', cancelled_at=None, completed_at=None, created_at=1713295020, expires_at=1713295620, failed_at=None, file_ids=[], instructions='Act like an a very smart data analyst and provide answers that are concise. You have all the mathamatical algorithms available to you. I will be sending you new data, with the same instructions each time, periodically so continue to examine the data and provide results, even if the data has not changed. Call my functions each time you run the prompt.', last_error=None, metadata={}, model='gpt-4-0125-preview', object='thread.run', required_action=None, started_at=None, status='queued', thread_id='thread_xITVemmzqDRD5JlJS1CNE5fY', tools=[ToolAssistantToolsCode(type='code_interpreter'), ToolAssistantToolsFunction(function=FunctionDefinition(name='sendAlarmSignalToNetworkNode', description='Send an alarm signal to a destination network node.', parameters={'type': 'object', 'properties': {'network_node': {'type': 'string', 'description': 'The name of a node on the network. Network node names include AlarmPanel, ControlPanel, NoticePanel, AlertPanel, CommandCenter.'}, 'message': {'type': 'string', 'description': 'The contents of the alarm signal message.'}}, 'required': ['network_node', 'message']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='sendControlSignalToNetworkNode', description='Send a control signal to a destination network node.', parameters={'type': 'object', 'properties': {'network_node': {'type': 'string', 'description': 'The name of a node on the network. Network node names include AlarmPanel, ControlPanel, NoticePanel, AlertPanel, CommandCenter.'}, 'message': {'type': 'string', 'description': 'The contents of the control signal message.'}}, 'required': ['network_node', 'message']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='sendNoticeSignalToNetworkNode', description='Send a notice signal to a destination network node.', parameters={'type': 'object', 'properties': {'network_node': {'type': 'string', 'description': 'The name of a node on the network. Network node names include AlarmPanel, ControlPanel, NoticePanel, AlertPanel, CommandCenter.'}, 'message': {'type': 'string', 'description': 'The contents of the notice signal message.'}}, 'required': ['network_node', 'message']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='sendCommandSignalToNetworkNode', description='Send a command signal to a destination network node.', parameters={'type': 'object', 'properties': {'network_node': {'type': 'string', 'description': 'The name of a node on the network. Network node names include AlarmPanel, ControlPanel, NoticePanel, AlertPanel, CommandCenter.'}, 'message': {'type': 'string', 'description': 'The contents of the command signal message.'}}, 'required': ['network_node', 'message']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='sendAlertSignalToNetworkNode', description='Send an alert signal to a destination network node.', parameters={'type': 'object', 'properties': {'network_node': {'type': 'string', 'description': 'The name of a node on the network. Network node names include AlarmPanel, ControlPanel, NoticePanel, AlertPanel, CommandCenter.'}, 'message': {'type': 'string', 'description': 'The contents of the alert signal message.'}}, 'required': ['network_node', 'message']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='getNickname', description='Get the nickname of a city', parameters={'type': 'object', 'properties': {'location': {'type': 'string', 'description': 'The city and state e.g. San Francisco, CA'}}, 'required': ['location']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='getMagicNumber', description='This number is magical.', parameters={'type': 'object', 'properties': {'tagname': {'type': 'string', 'description': 'The name of the magic number'}}, 'required': ['tagname']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='getSensorValuebyName', description='Get the value of a sensor by its name. The value is NOTFOUND if the sensor is not available', parameters={'type': 'object', 'properties': {'tagname': {'type': 'string', 'description': 'The name of the sensor.'}}, 'required': ['tagname']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='sendGridPeakDetected', description='Send a grid peak detected to a destination network node.', parameters={'type': 'object', 'properties': {'network_node': {'type': 'string', 'description': 'The name of a node on the network. Network node names include C2Agent, AlarmPanel, ControlPanel, NoticePanel, AlertPanel, CommandCenter.'}, 'message': {'type': 'string', 'description': 'The description of the peak detected.'}, 'start_date_time': {'type': 'string', 'description': 'The datetime of the peak detected.'}, 'duration_mins': {'type': 'string', 'description': 'The duration in minutes of the peak detected.'}, 'peak_lmp': {'type': 'string', 'description': 'The LMP for a megawatt-hour during the peak detected.'}, 'grid_node': {'type': 'string', 'description': 'The grid pricing node for the peak detected .'}, 'award_level': {'type': 'string', 'description': 'The award level of the game. Values can be BRONZE, SILVER and GOLD'}, 'game_type': {'type': 'string', 'description': 'The type of game that is being played. The values can be SHEDPOWER or HARVESTPOWER'}}, 'required': ['network_node', 'message', 'start_date_time', 'duration_mins', 'peak_lmp', 'grid_node', 'award_level', 'game_type']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='getNickname3', description='Get the nickname of a city', parameters={'type': 'object', 'properties': {'location': {'type': 'string', 'description': 'The city and state e.g. San Francisco, CA'}}, 'required': ['location']}), type='function')], usage=None, temperature=1.0, top_p=1.0, max_completion_tokens=None, max_prompt_tokens=None, truncation_strategy={'type': 'auto', 'last_messages': None}, incomplete_details=None, response_format='auto', tool_choice='auto') 

[2024-04-16 15:16:59.636138] DEBUG: openailib: User: Hello. My name is Dave. What is your name?
[2024-04-16 15:16:59.636138] DEBUG: openailib: Assistant: Hello, Dave. I am an AI Data Analyst. How can I assist you today?
[2024-04-16 15:17:08.766899] DEBUG: runserver: Received message '{"name": "RANDO", "value": "0.45258024319422363", "status": "OK"}' on topic 'openai/assistant/GridLoadMan-1-0-0/DataFeed'
[2024-04-16 15:17:08.766899] DEBUG: runserver: To DataFeed: openai/assistant/GridLoadMan-1-0-0/DataFeed {"name": "RANDO", "value": "0.45258024319422363", "status": "OK"}
[2024-04-16 15:17:08.766899] DEBUG: runserver: value from cache = {"time": "2024-04-16T15:17:08.766899", "value": "0.45258024319422363", "status": "OK"}
[2024-04-16 15:17:08.812329] DEBUG: runserver: Received message '{"name": "Dave", "value": "0.06560304551219687", "status": "OK"}' on topic 'openai/assistant/GridLoadMan-1-0-0/DataFeed'
[2024-04-16 15:17:08.812329] DEBUG: runserver: To DataFeed: openai/assistant/GridLoadMan-1-0-0/DataFeed {"name": "Dave", "value": "0.06560304551219687", "status": "OK"}
[2024-04-16 15:17:08.813270] DEBUG: runserver: value from cache = {"time": "2024-04-16T15:17:08.813270", "value": "0.06560304551219687", "status": "OK"}
[2024-04-16 15:17:09.853324] DEBUG: runserver: Received message '{"name": "MasterSwitch", "value": "ON", "status": "OK"}' on topic 'openai/assistant/GridLoadMan-1-0-0/DataFeed'
[2024-04-16 15:17:09.854272] DEBUG: runserver: To DataFeed: openai/assistant/GridLoadMan-1-0-0/DataFeed {"name": "MasterSwitch", "value": "ON", "status": "OK"}
[2024-04-16 15:17:09.854272] DEBUG: runserver: value from cache = {"time": "2024-04-16T15:17:09.854272", "value": "ON", "status": "OK"}
[2024-04-16 15:17:09.898745] DEBUG: runserver: Received message '{"name": "TemperatureInLewes", "value": "69", "status": "OK"}' on topic 'openai/assistant/GridLoadMan-1-0-0/DataFeed'
[2024-04-16 15:17:09.898745] DEBUG: runserver: To DataFeed: openai/assistant/GridLoadMan-1-0-0/DataFeed {"name": "TemperatureInLewes", "value": "69", "status": "OK"}
[2024-04-16 15:17:09.899753] DEBUG: runserver: value from cache = {"time": "2024-04-16T15:17:09.899753", "value": "69", "status": "OK"}
